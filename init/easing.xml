<Layer Type="ActorFrame" InitCommand="%m_prefix(function(self)
if init then init = nil return end -- prevent init frum running twice
init = true

-- Adapted from
-- Tweener's easing functions (Penner's Easing Equations)
-- and http://code.google.com/p/tweener/ (jstweener javascript version)
--

--[[
Disclaimer for Robert Penner's Easing Equations license:

TERMS OF USE - EASING EQUATIONS

Open source under the BSD License.

Copyright © 2001 Robert Penner
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	* Neither the name of the author nor the names of contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
]]

-- For all easing functions:
-- t = elapsed time from 0 to 1

local pow = math.pow
local sin = math.sin
local cos = math.cos
local pi = math.pi
local sqrt = math.sqrt
local abs = math.abs
local asin	= math.asin
local exp = math.exp

function linear(t) return t end

function inQuad(t) return t * t end
function outQuad(t) return -t * (t - 2) end
function inOutQuad(t)
	t = t * 2
	if t < 1 then
		return inQuad(t, a, p) * 0.5
	else
		return outQuad(t - 1, a, p) * 0.5 + 0.5
	end
end
function outInQuad(t)
	t = t * 2
	if t < 1 then
		return outQuad(t, a, p) * 0.5
	else
		return inQuad(t - 1, a, p) * 0.5 + 0.5
	end
end

function inCubic(t) return t * t * t end
function outCubic(t) return 1 - (1 - t) ^ 3 end
function inOutCubic(t)
	t = t * 2
	if t < 1 then
		return inCubic(t, a, p) * 0.5
	else
		return outCubic(t - 1, a, p) * 0.5 + 0.5
	end
end
function outInCubic(t)
	t = t * 2
	if t < 1 then
		return outCubic(t, a, p) * 0.5
	else
		return inCubic(t - 1, a, p) * 0.5 + 0.5
	end
end

function inQuart(t) return t * t * t * t end
function outQuart(t) return 1 - (1 - t) ^ 4 end
function inOutQuart(t)
	t = t * 2
	if t < 1 then
		return inQuart(t, a, p) * 0.5
	else
		return outQuart(t - 1, a, p) * 0.5 + 0.5
	end
end
function outInQuart(t)
	t = t * 2
	if t < 1 then
		return outQuart(t, a, p) * 0.5
	else
		return inQuart(t - 1, a, p) * 0.5 + 0.5
	end
end

function inQuint(t) return t ^ 5 end
function outQuint(t) return 1 - (1 - t) ^ 5 end
function inOutQuint(t)
	t = t * 2
	if t < 1 then
		return inQuint(t, a, p) * 0.5
	else
		return outQuint(t - 1, a, p) * 0.5 + 0.5
	end
end
function outInQuint(t)
	t = t * 2
	if t < 1 then
		return outQuint(t, a, p) * 0.5
	else
		return inQuint(t - 1, a, p) * 0.5 + 0.5
	end
end

function inSine(t) return 1 - cos(t * (pi * 0.5)) end
function outSine(t) return sin(t * (pi * 0.5)) end
function inOutSine(t)
	t = t * 2
	if t < 1 then
		return inSine(t, a, p) * 0.5
	else
		return outSine(t - 1, a, p) * 0.5 + 0.5
	end
end
function outInSine(t)
	t = t * 2
	if t < 1 then
		return outSine(t, a, p) * 0.5
	else
		return inSine(t - 1, a, p) * 0.5 + 0.5
	end
end

function inExpo(t) return 1000 ^ (t - 1) - 0.001 end
function outExpo(t) return 0.999 - 1000 ^ -t end
function inOutExpo(t)
	t = t * 2
	if t < 1 then
		return inExpo(t, a, p) * 0.5
	else
		return outExpo(t - 1, a, p) * 0.5 + 0.5
	end
end
function outInExpo(t)
	t = t * 2
	if t < 1 then
		return outExpo(t, a, p) * 0.5
	else
		return inExpo(t - 1, a, p) * 0.5 + 0.5
	end
end

function inCirc(t) return 1 - sqrt(1 - t * t) end
function outCirc(t) return sqrt(-t * t + 2 * t) end
function inOutCirc(t)
	t = t * 2
	if t < 1 then
		return inCirc(t, a, p) * 0.5
	else
		return outCirc(t - 1, a, p) * 0.5 + 0.5
	end
end
function outInCirc(t)
	t = t * 2
	if t < 1 then
		return outCirc(t, a, p) * 0.5
	else
		return inCirc(t - 1, a, p) * 0.5 + 0.5
	end
end

-- a: amplitude
-- p: period
function inElastic(t, a, p)
	p, a, t = p or 0.3, a or 1, t - 1
	return -(a * pow(2, 10 * t) * sin((t - (p / (2 * pi) * asin(1 / a))) * (2 * pi) / p))
end
function outElastic(t, a, p)
	p, a = p or 0.3, a or 1
	return a * pow(2, -10 * t) * sin((t - (p / (2 * pi) * asin(1 / a))) * (2 * pi) / p) + 1
end
function inOutElastic(t, a, p)
	t = t * 2
	if t < 1 then
		return inElastic(t, a, p) * 0.5
	else
		return outElastic(t - 1, a, p) * 0.5 + 0.5
	end
end
function outInElastic(t, a, p)
	t = t * 2
	if t < 1 then
		return outElastic(t, a, p) * 0.5
	else
		return inElastic(t - 1, a, p) * 0.5 + 0.5
	end
end

function outBack(t, s) s = s or 1.70158 return ((t - 1) * (t - 1) * ((s + 1) * (t - 1) + s) + 1) end
function inBack(t, s) s = s or 1.70158 return t * t * ((s + 1) * t - s) end
function inOutBack(t, s)
	t = t * 2
	if t < 1 then
		return inBack(t, s) * 0.5
	else
		return outBack(t - 1, s) * 0.5 + 0.5
	end
end
function outInBack(t, s)
	t = t * 2
	if t < 1 then
		return outBack(t, s) * 0.5
	else
		return inBack(t - 1, s) * 0.5 + 0.5
	end
end

function outBounce(t)
	if t < 1 / 2.75 then return 7.5625 * t * t
	elseif t < 2 / 2.75 then t = t - 1.5 / 2.75 return 7.5625 * t * t + 0.75
	elseif t < 2.5 / 2.75 then t = t - 2.25 / 2.75 return 7.5625 * t * t + 0.9375
	else t = t - 2.625 / 2.75 return 7.5625 * t * t + 0.984375 end
end
function inBounce(t) return 1 - outBounce(1 - t) end
function inOutBounce(t, b, c, d)
	t = t * 2
	if t < 1 then
		return inBounce(t, s) * 0.5
	else
		return outBounce(t - 1, s) * 0.5 + 0.5
	end
end
function outInBounce(t, b, c, d)
	t = t * 2
	if t < 1 then
		return outBounce(t, s) * 0.5
	else
		return inBounce(t - 1, s) * 0.5 + 0.5
	end
end
-- TODO rework this
-- function flicker(t) if t == 1 then return 0 end return floor(GAMESTATE:GetSongTime() * 60) % 2 end

-- transiant eases courtesy of XeroOl's notitg-mirin template
function instant() return 1 end
function bounce(t) return 4 * t * (1 - t) end
function tri(t) return 1 - abs(2 * t - 1) end
function bell(t) return inOutQuint(tri(t)) end
function pop(t) return 3.5 * (1 - t) * (1 - t) * sqrt(t) end
function tap(t) return 3.5 * t * t * sqrt(1 - t) end
function pulse(t) return t < .5 and tap(t * 2) or -pop(t * 2 - 1) end

function spike(t) return exp(-10 * abs(2 * t - 1)) end
function inverse(t) return t * t * (1 - t) * (1 - t) / (0.5 - t) end

function square(t) return t == 1 and 0 or 1 end

-- smooth step, super smooth step and super super smooth step
-- courtesy of RB2
function ss(t) return 3 * t ^ 2 - 2 * t ^ 3 end
function sss(t) return t ^ 5 * (5 * t * (t * (7 * t * (2 * t - 9) + 108) - 84) + 126) end
function ssss(t) return t ^ 7 * 1716 + 7 * t ^ 8 * (2 * t * (3 * t * (t * (11 * t * (2 * t - 13) + 390) - 572) + 1430) - 1287) end
end)"
/>